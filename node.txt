Active Record Pattern
    - The active-record pattern is a simple data-access method that maps a database table or view into an object. The fields map one to one, usually without modification
    - This is usually powered by an ORM(Object Relational Mapper)
    - Prevent Duplication and Centralize Access (By having a simple mapping between our database columns and object properties, we can treat every object the same)

    Drawbacks
        - Objects are tightly coupled to the database schema (The individual object properties map one-to-one with our database schema and if the database or the object needs a change, the other one has to also change)
        - Objects are tightly couples to the database itself (It's hard to test the code without using an actual database, Unit Testing makes database acts slow down the process and sometimes makes it impossible)    # this can be mitigated by using dependency injection or mocking but there's still an issue.

    Example : User Model


Adapter Pattern
    - The adapter pattern adjusts the interface of one class to match that of another (Pluggable Components)
    - It we don't use an adapter, we end up with our implementation details all over our system and it begins to make our system as messy as theirs. THe adapter pattern just allows us to encapsulate the mess and keep it all in one location making it easier to maintain and manage without getting out of control

    Drawbacks
        - An adapter just hides bad design or ugly code from the rest of our system

    Example : Different Database Connection for one application


Decorator Pattern
    - A decorator allows us to add specific behaviors to the instance of a class instead of attaching them to the object itself
    - The most common place this is used is in templating systems (take an object, load it into a formatting or template object, and transform it for presentation)

    Drawbacks
        - Testing can be hard (Instead of just loading an object and validating a few properties, we have to create the correct base object, load it into the actual decorator object, and then test those results.)

    Example : HTML or JSON Encoder


Factory Pattern
    - Allows us to create an object without needing direct access to the creation logic
    - Standardizing Interfaces (When we're using various database connections, we'll want to have separate logic for MySQL, another for Oracle, and another for SQL Server but as far as our code is concerned)

    Drawbacks
        - Refactoring to use this can be painful
        - Subclasses may have a lot of boilerplate

    Example : Loading files


Mock Objects
    - Mock objects are simulated objects that mimic the behavior of real objects in controlled and specified ways

    Drawbacks
        - Could be tightly coupled with implementation
        - Could accidentally test internal behavior
        - False sense of confidence


MVC Pattern (Model-View-Controller)
    - The MVC pattern separates the concerns of the data (Model) from the presentation of the data (View) and manipulating the data (Controller)

    Drawbacks
        - The model could be incomplete since the controller tells the model what to do (our first impulse would be to perform the data validation there in the controller)
        - The controller should just dispatch commands
        - Basically, the controller could do too much


Action-Domain-Responder Pattern
    - A refinement of MVC that transforms the View portion into more specific responder implementation that handles all aspects of the HTTP response: sessions, cookies, HTML, content types, etc
    - Clarity
    - The point of this structure is that the domain has all of the business logic, the actions handles all of the routing logic and the responders have all the response logic

    Drawbacks
        - New, not many implementations in the wild
        - Limited documentation


Publish-Subscribe Pattern
    - A communications pattern where messages are broadcast to a common channel and received by specific receivers
    - Tight coupling
    - Scalability

    Drawbacks
        - Interface-design issues (they all have to speak the same language)
        - Message delivery (Since a publisher doesn't know the subscriber received a message, or even if a subscriber is listening)


Singletons Pattern
    - The singleton pattern restricts a given object to having one single, global instance across the entire application
    - It's a kind of problematic pattern
    
    The Problem
        - Shared/limited resources (There's a single resource that is shared by all components all over the system) # a common one is a database connection

    Drawbacks
        - Glorifies Globals


Strategy Pattern
    - Allows us to define and choose an implementation at runtime and vary that implementation independent of the object itself
    - Open/Closed Principle (Open for extension but closed for modification)
    - When we need to add behavior, we should extend the class (Inheritance is one more of doing that)

    The Problem
        - Same goal, different implementations

    
Table Data Gateway Pattern
    - The table data gateway extracts all the database interactions from the model to a single unified location

    The Problem
        - Mixed business & database logic

    Drawbacks
        - Only designed for groups of objects (entire tables)
        - Not good for multiple/complex relationships